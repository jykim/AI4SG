---
description: 
globs: 
alwaysApply: true
---
---
description: This rule file provides best practices and coding standards for using the Plotly library, focusing on code organization, performance, security, testing, and common pitfalls. It aims to guide developers in creating maintainable, efficient, and secure Plotly applications.
globs: **/*.py
---
# Plotly Best Practices and Coding Standards

You are experienced coding assistant. You know your boundaries and generally be conservatice in making changes. You ask questions first when not sure and don't make changes that are not asked.

### Overarching Rules
* Don't act before being asked
 * When not sure, ask first for permission
 * When asked question, just answer without changing anything
 * Especially when I say DTA (don't touch anything)
* Fix with minimum changes (FMC)
 * Local change is preferred over spreading changes
 * Reuse existing components before creating a new one
* When referring any rule, mention that you're doing so
  * e.g. I'm doing this because your rule XYZ says so

### 1.2. File Naming Conventions

Follow consistent naming conventions for files and directories to improve readability and maintainability:

*   Use lowercase letters for file names.
*   Separate words with underscores (`_`).
*   Be descriptive and concise.

Example:

*   `charts.py`
*   `data_cleaning.py`
*   `feature_engineering.py`
*   `model_training.py`


### 1.5. Code Splitting Strategies

For web applications built with Dash, code splitting can improve performance by loading only the necessary code for each page or component. Strategies include:

*   Using Dash's `dcc.Location` component to conditionally render different components based on the URL.
*   Implementing lazy loading for large datasets or complex visualizations.
*   Breaking down your Dash app into multiple files and importing only the necessary components.

## 2. Common Patterns and Anti-patterns

### 2.1. Design Patterns Specific to Plotly

*   **Factory Pattern:** Use a factory function to create different types of charts based on input parameters. This simplifies the creation of charts and promotes code reuse.
*   **Template Method Pattern:** Define a base class for chart components with a template method that outlines the steps for creating a chart. Subclasses can then implement specific steps.
*   **Observer Pattern:** In Dash applications, use the Observer pattern to update charts dynamically based on user interactions or data changes.

### 2.2. Recommended Approaches for Common Tasks

*   **Creating Interactive Charts:** Use `plotly.express` for quick interactive charts. For more control, use `plotly.graph_objects`.
*   **Updating Chart Layouts:** Use `fig.update_layout()` to modify chart titles, axes labels, legends, and annotations.
*   **Handling Large Datasets:** Use techniques like data aggregation, sampling, or WebGL rendering to improve performance.
*   **Creating Dashboards:** Use the Dash framework to build interactive web applications with Plotly charts.

### 2.3. Anti-patterns and Code Smells

*   **Overloading Charts:** Avoid including too much information in a single chart, which can make it difficult to interpret.
*   **Ignoring Performance:** Neglecting to optimize charts for large datasets can lead to slow rendering and poor user experience.
*   **Hardcoding Values:** Avoid hardcoding values in your chart definitions. Use configuration files or environment variables instead.
*   **Not Handling Errors:** Failing to handle errors can lead to unexpected behavior and poor user experience.
*   **Inconsistent Styling:** Ensure consistent styling across all charts in your application.

### 2.4. State Management Best Practices for Plotly Applications (Dash)

*   **Use Dash's `dcc.Store` component:** Store application-wide state in `dcc.Store` components. This allows you to share state between different callbacks.
*   **Avoid Storing Large Datasets in State:** Instead, load data on-demand or use a server-side caching mechanism.
*   **Use Callbacks to Update State:** Only update state in response to user interactions or data changes.
*   **Immutable State Updates:** Treat state as immutable and create new state objects instead of modifying existing ones.

### 2.5. Error Handling Patterns

*   **Use `try-except` Blocks:** Wrap Plotly code in `try-except` blocks to catch potential exceptions, such as data errors or rendering issues.
*   **Log Errors:** Log error messages to a file or console for debugging purposes.
*   **Display User-Friendly Error Messages:** Display informative error messages to the user instead of showing raw exceptions.
*   **Implement Fallback Mechanisms:** Provide fallback mechanisms in case of chart rendering failures, such as displaying a static image or a placeholder message.

## 5. Testing Approaches

### 5.1. Unit Testing

*   **Test Individual Components:** Write unit tests to test individual components of your Plotly code, such as chart functions or layout definitions.
*   **Use Mock Data:** Use mock data to isolate components from external dependencies.
*   **Verify Chart Properties:** Verify that the chart properties, such as titles, axes labels, and data values, are correct.

### 5.2. Integration Testing

*   **Test Interactions Between Components:** Write integration tests to test the interactions between different components of your application.
*   **Use a Test Database:** Use a test database to isolate your tests from the production database.
*   **Verify Data Flow:** Verify that data flows correctly between components.

### 5.3. End-to-End Testing

*   **Test the Entire Application:** Write end-to-end tests to test the entire application from the user's perspective.
*   **Use a Testing Framework:** Use a testing framework, such as Selenium or Cypress, to automate end-to-end tests.
*   **Verify User Interactions:** Verify that user interactions, such as clicking buttons or entering data, produce the expected results.

### 5.4. Test Organization

*   **Organize Tests by Module:** Organize your tests into directories that correspond to the modules in your application.
*   **Use Descriptive Test Names:** Use descriptive test names that clearly indicate what the test is verifying.
*   **Write Clear Assertions:** Write clear assertions that verify the expected results.

### 5.5. Mocking and Stubbing

*   **Use Mock Objects:** Use mock objects to replace external dependencies, such as databases or APIs, with controlled test doubles.
*   **Use Stub Functions:** Use stub functions to replace complex or time-consuming operations with simple, predictable implementations.
*   **Verify Interactions with Mocks:** Verify that your code interacts with mock objects in the expected way.

## 6. Common Pitfalls and Gotchas

### 6.1. Frequent Mistakes

*   **Incorrect Data Formatting:** Ensure that your data is formatted correctly for Plotly charts. For example, ensure that dates are in the correct format and that numerical data is not stored as strings.
*   **Missing Dependencies:** Ensure that all required dependencies are installed.
*   **Incorrect Chart Types:** Choose the correct chart type for your data and the message you want to convey.
*   **Ignoring Layout Customization:** Customize the chart layout to improve readability and visual appeal.

### 6.2. Edge Cases

*   **Handling Missing Data:** Handle missing data gracefully by either removing it from the chart or replacing it with a default value.
*   **Dealing with Outliers:** Deal with outliers appropriately by either removing them from the chart or using a chart type that is less sensitive to outliers, such as a box plot.
*   **Handling Large Numbers:** Handle large numbers by using appropriate formatting and scaling.

### 6.3. Version-Specific Issues

*   **Check Release Notes:** Check the release notes for each Plotly version to be aware of any breaking changes or bug fixes.
*   **Test with Different Versions:** Test your code with different Plotly versions to ensure compatibility.

### 6.4. Compatibility Concerns

*   **Dash Version Compatibility:** Ensure that your Dash version is compatible with your Plotly version.
*   **Browser Compatibility:** Test your charts in different browsers to ensure compatibility.

### 6.5. Debugging Strategies

*   **Use Debugging Tools:** Use debugging tools, such as print statements or a debugger, to identify and fix issues in your code.
*   **Check Error Messages:** Check error messages for clues about what is going wrong.
*   **Simplify the Chart:** Simplify the chart by removing traces or annotations to isolate the issue.


By following these best practices and coding standards, you can create maintainable, efficient, and secure Plotly applications that meet the needs of your users and stakeholders.